parameters:
  - name: aws_dev
    default: aws --profile=apim-dev
  - name: is_ptl
    default: true

steps:
  - ${{ if parameters.is_ptl }}:
      - template: "azure/components/aws-assume-role.yml@common"
        parameters:
          role: "auto-ops"
          profile: "apm_ptl"

      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_file_ids:
            - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
          secret_ids:
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INTROSPECTION_CLIENT_ID
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INTROSPECTION_CLIENT_ID_INT
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INTROSPECTION_CLIENT_SECRET_INT
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INT_CLIENT_ID
            - ptl/app-credentials/gp-connect-appointments-management-fhir-testing-app/non-prod/INT_CLIENT_SECRET

  - bash: |
      make install-python
      make install-node
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()

  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apim-dev"
      aws_account: "dev"

  - bash: |
      set -e
      if ! [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]; then
          export AWS_PROFILE=apim-dev
          aws_account_no="$(aws sts get-caller-identity --query Account --output text)"

          service_name=$(FULLY_QUALIFIED_SERVICE_NAME)

          introspection_client_id=$(INTROSPECTION_CLIENT_ID)
          introspection_client_secret=$(INTROSPECTION_CLIENT_SECRET)
          if [[ $APIGEE_ENVIRONMENT = int ]]; then
            introspection_client_id=$(INTROSPECTION_CLIENT_ID_INT)
            introspection_client_secret=$(INTROSPECTION_CLIENT_SECRET_INT)
          fi

          pr_no=$(echo $service_name | { grep -oE '[0-9]+$' || true; })
          if [ -z $pr_no ]; then
            workspace=$APIGEE_ENVIRONMENT
          else
            workspace=pr-$pr_no
          fi

          echo Deploy mock provider with following parameters:
          echo service_name: $service_name
          echo workspace: $workspace
          echo Apigee environment: $APIGEE_ENVIRONMENT
          echo pr_no: $pr_no
          echo introspection client id: $introspection_client_id

          cd terraform
          make init
          make apply aws_account_no=${aws_account_no} environment=$workspace \
            client_id=$introspection_client_id \
            client_secret=$introspection_client_secret \
            keycloak_environment=$APIGEE_ENVIRONMENT
          cd ..

          if [ -n "$pr_no" ]; then
            echo add KVM for PR-$pr_no
            source .venv/bin/activate
            domain_name=https://$(make -C terraform -s output name=service_domain_name)
            oauth_endpoint="https://identity.ptl.api.platform.nhs.uk/realms/gpconnect-pfs-mock-$APIGEE_ENVIRONMENT/protocol/openid-connect/token"
            python scripts/apigee_kvm.py --env $APIGEE_ENVIRONMENT --access-token $(secret.AccessToken) populate-interaction-ids gp-connect-appointments-management-endpoints-pr-$pr_no --ods REPC --provider-endpoint $domain_name --oauth-endpoint $oauth_endpoint
          fi
      fi
    displayName: Deploy mock provider
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
    retryCountOnTaskFailure: 2

  - bash: |
      set -e
      export RELEASE_RELEASEID=$(Build.BuildId)
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
      export STATUS_ENDPOINT_API_KEY="$(status-endpoint-api-key)"
      export JWT_PRIVATE_KEY_ABSOLUTE_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export client_id="$(INTROSPECTION_CLIENT_ID)"
      export client_secret="$(INTROSPECTION_CLIENT_SECRET)"
      export APIGEE_APP_ID=e1a73dda-209b-4f31-8c16-57b9d68a8de7

      if [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]
      then
       poetry run pytest -v -m "not nhsd_apim_authorization and not mock_provider_int" --api-name=gp-connect-appointments-management-fhir --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml

      elif [[ $APIGEE_ENVIRONMENT == "int" ]]
      then
       export DEFAULT_CLIENT_ID="$(INT_CLIENT_ID)"
       export DEFAULT_CLIENT_SECRET="$(INT_CLIENT_SECRET)"
       export client_id="$(INTROSPECTION_CLIENT_ID_INT)"
       export client_secret="$(INTROSPECTION_CLIENT_SECRET_INT)"
       poetry run pytest -v -m "not nhsd_apim_authorization" --api-name=gp-connect-appointments-management-fhir --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml

      else
       poetry run pytest -v -m "not mock_provider_int" --api-name=gp-connect-appointments-management-fhir --proxy-name=$PROXY_NAME -o junit_logging=all --junitxml=test-report.xml
      fi
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests"
    displayName: Run full test suite
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true
